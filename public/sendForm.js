// h√†m ch·ª©c nƒÉng m·ªü div ·∫©n
function openMenuMessage() {
    const displayButton = document.getElementById('displayButton');
    const hiddenButtons = document.getElementById('hiddenButtons');

    if (!displayButton || !hiddenButtons) {
        console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ menu hi·ªÉn th·ªã.');
        return;
    }

    displayButton.addEventListener('click', () => {
        hiddenButtons.style.display = (hiddenButtons.style.display === 'none' || hiddenButtons.style.display === '')
            ? 'block'
            : 'none';
    });

    const buttons = hiddenButtons.querySelectorAll('button');
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            hiddenButtons.style.display = 'none';
        });
    });
}

// ch·ª©c nƒÉng chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n
function voiceToText() {
    const startRecording = document.getElementById('startRecording');
    const messageTextarea = document.querySelector("textarea[name='message']");

    if (!startRecording || !messageTextarea) {
        console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ghi √¢m ho·∫∑c √¥ nh·∫≠p tin nh·∫Øn.');
        return;
    }

    let recognition;
    let isRecordingText = false;

    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        recognition.lang = 'vi-VN';
        recognition.interimResults = true;
        recognition.continuous = false;

        startRecording.addEventListener('click', () => {
            if (isRecordingText) {
                recognition.stop();
            } else {
                recognition.start();
                showNotification('üéôÔ∏è B·∫Øt ƒë·∫ßu chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n...');
            }
            isRecordingText = !isRecordingText;
        });

        recognition.onresult = (event) => {
            let speechToText = event.results[0][0].transcript;
            if (speechToText.endsWith('.')) {
                speechToText = speechToText.slice(0, -1);
            }
            messageTextarea.value = speechToText;
        };

        recognition.onspeechend = () => {
            if (!isRecordingText) {
                recognition.stop();
            }
        };

        recognition.onerror = (event) => {
            console.error("L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i:", event.error);
            isRecordingText = false;
        };
    } else {
        showNotification('‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i.');
    }
}

// g·ª≠i ƒë·ªãnh v·ªã
function sendLocation() {
    const sendLocationButton = document.getElementById('sendLocationButton');
    const sendLocationUrl = sendLocationButton.dataset.sendLocationUrl;

    if (!sendLocationButton) {
        console.warn('Kh√¥ng t√¨m th·∫•y n√∫t g·ª≠i v·ªã tr√≠!');
        return;
    }

    sendLocationButton.addEventListener('click', async (e) => {
        e.preventDefault();

        if (!navigator.geolocation) {
            alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã!');
            return;
        }

        sendLocationButton.classList.add('loading');

        navigator.geolocation.getCurrentPosition(
            (position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                temporaryMsgId += 1;
                let tempID = `temp_${temporaryMsgId}`;
                const tempLocationMessage = sendTempMessageCard(loadingSVG("28px"), tempID);
                messagesContainer.find(".messages").append(tempLocationMessage);
                scrollToBottom(messagesContainer);

                const formData = new FormData();
                formData.append("latitude", latitude);
                formData.append("longitude", longitude);
                formData.append("channel_id", currentChannelId());
                formData.append("temporaryMsgId", tempID);
                formData.append("_token", csrfToken);

                $.ajax({
                    url: sendLocationUrl,
                    method: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    beforeSend: () => console.log("Sending location..."),
                    success: (data) => {
                        if (data.status === '403') {
                            Swal.fire({
                                icon: "warning",
                                title: "Th√¥ng b√°o",
                                text: "ƒê√£ b·ªã ch·∫∑n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn!",
                            });
                        } else if (data.error > 0) {
                            errorMessageCard(tempID);
                            console.error(data.error_msg);
                        } else {
                            const tempMsgCardElement = messagesContainer.find(`.message-card[data-id="${tempID}"]`);
                            if (tempMsgCardElement.length) {
                                const locationHTML = `
                                    <div class="location-message">
                                        <iframe
                                            width="100%"
                                            height="200"
                                            frameborder="0"
                                            style="border:0; border-radius: 10px;"
                                            src="https://www.google.com/maps?q=${latitude},${longitude}&hl=vi&z=15&output=embed"
                                            allowfullscreen>
                                        </iframe>
                                    </div>
                                `;
                                tempMsgCardElement.find(".message").html(locationHTML);
                            }

                            scrollToBottom(messagesContainer);
                            updateContactItem(currentChannelId());
                            sendContactItemUpdates(true);
                        }
                    },
                    error: (xhr, status, error) => {
                        errorMessageCard(tempID);
                        console.error("Failed sending the location! Error:", error);
                    },
                });

                sendLocationButton.classList.remove('loading');
            },
            (error) => {
                alert('Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠!');
                console.error('Geolocation error:', error);
                sendLocationButton.classList.remove('loading');
            },
            {
                enableHighAccuracy: true,
            }
        );
    });
}

// ch·ª©c nƒÉng v·∫Ω h√¨nh
// drawingBoard.js

let currentColor = 'black';
let isErasing = false;
let isDrawing = false;
let lastX = 0;
let lastY = 0;
const offsetY = 70;
const ctx = document.getElementById('drawingCanvas').getContext('2d');

// H√†m m·ªü b·∫£ng v·∫Ω
function openDrawingBoard() {
    const drawingBoardModal = document.getElementById('drawingBoardModal');
    drawingBoardModal.style.display = 'flex'; // Hi·ªÉn th·ªã modal
}

// H√†m ƒë√≥ng b·∫£ng v·∫Ω
function closeDrawingBoard() {
    const drawingBoardModal = document.getElementById('drawingBoardModal');
    drawingBoardModal.style.display = 'none'; // ·∫®n modal
}

// H√†m x·ª≠ l√Ω thay ƒë·ªïi m√†u v·∫Ω
function changeColor(button) {
    currentColor = button.style.backgroundColor; // L·∫•y m√†u t·ª´ n√∫t b·∫•m
    ctx.strokeStyle = currentColor; // C·∫≠p nh·∫≠t m√†u n√©t v·∫Ω
}

// H√†m chuy·ªÉn ch·∫ø ƒë·ªô x√≥a
function toggleErase() {
    isErasing = !isErasing; // ƒê·ªïi tr·∫°ng th√°i x√≥a
    const eraseButton = document.getElementById('eraseButton');
    if (isErasing) {
        eraseButton.classList.add('active'); // L√†m n·ªïi b·∫≠t n√∫t x√≥a
    } else {
        eraseButton.classList.remove('active'); // T·∫Øt n·ªïi b·∫≠t n√∫t x√≥a
    }
}

// H√†m b·∫Øt ƒë·∫ßu v·∫Ω
function startDrawing(e) {
    e.preventDefault(); // NgƒÉn h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh
    isDrawing = true;

    if (e.type === "mousedown") {
        lastX = e.offsetX;
        lastY = e.offsetY;
    } else if (e.type === "touchstart") {
        lastX = e.touches[0].clientX - drawingCanvas.offsetLeft;
        lastY = e.touches[0].clientY - drawingCanvas.offsetTop - offsetY;
    }

    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
}

// H√†m v·∫Ω
function draw(e) {
    if (!isDrawing) return;

    e.preventDefault(); // NgƒÉn h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh

    let x, y;
    if (e.type === "mousemove") {
        x = e.offsetX;
        y = e.offsetY;
    } else if (e.type === "touchmove") {
        x = e.touches[0].clientX - drawingCanvas.offsetLeft;
        y = e.touches[0].clientY - drawingCanvas.offsetTop - offsetY;
    }

    if (isErasing) {
        ctx.clearRect(x - 10, y - 10, 20, 20); // X√≥a v√πng nh·ªè quanh con tr·ªè
    } else {
        ctx.lineTo(x, y);
        ctx.stroke();
    }

    lastX = x;
    lastY = y;
}

// H√†m d·ª´ng v·∫Ω
function stopDrawing() {
    isDrawing = false;
    ctx.closePath();
}

// H√†m l√†m s·∫°ch b·∫£ng v·∫Ω
function clearCanvas() {
    ctx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);
}

// H√†m l∆∞u h√¨nh v·∫Ω v√† g·ª≠i qua AJAX
function saveCanvas() {
    const imageDataURL = drawingCanvas.toDataURL('image/png');
    drawingBoardModal.style.display = 'none';
    sendDrawing(imageDataURL); // G·ª≠i h√¨nh v·∫Ω qua AJAX
}

// H√†m g·ª≠i h√¨nh v·∫Ω qua AJAX
function sendDrawing(imageDataURL) {
    let temporaryMsgId = `temp_${new Date().getTime()}`;

    const formData = new FormData();
    formData.append("drawing_image", imageDataURL);
    formData.append("channel_id", currentChannelId());
    formData.append("temporaryMsgId", temporaryMsgId);
    formData.append("_token", csrfToken);

    const tempDrawingMessage = sendTempMessageCard(loadingSVG("28px"), temporaryMsgId);
    messagesContainer.find(".messages").append(tempDrawingMessage);
    scrollToBottom(messagesContainer);
    const sendDrawUrl = document.getElementById('openDrawingBoard').dataset.sendDrawUrl;

    // G·ª≠i qua AJAX
    $.ajax({
        url: sendDrawUrl,
        method: "POST",
        data: formData,
        processData: false,
        contentType: false,
        beforeSend: () => console.log("Sending drawing..."),
        success: (data) => handleDrawingResponse(data, temporaryMsgId),
        error: (xhr, status, error) => {
            errorMessageCard(temporaryMsgId);
            console.error("Failed sending the drawing! Error:", error);
        }
    });
}

// H√†m x·ª≠ l√Ω ph·∫£n h·ªìi sau khi g·ª≠i h√¨nh v·∫Ω
function handleDrawingResponse(data, temporaryMsgId) {
    if (data.status === '403') {
        Swal.fire({
            icon: "warning",
            title: "Th√¥ng b√°o",
            text: "ƒê√£ b·ªã ch·∫∑n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn!",
        });
    } else if (data.error > 0) {
        errorMessageCard(temporaryMsgId);
        console.error(data.error_msg);
    } else {
        const tempMsgCardElement = messagesContainer.find(`.message-card[data-id="${temporaryMsgId}"]`);
        if (tempMsgCardElement.length) {
            const drawingHTML = `
                <div class="message" style="height:170px; width:260px">
                    <img src="${data.image_url}" alt="Drawing" style="max-width: 100%; background: white;; border-radius: 6px" />
                </div>
            `;
            tempMsgCardElement.find(".message").html(drawingHTML);
        }
        scrollToBottom(messagesContainer);
        updateContactItem(currentChannelId());
        sendContactItemUpdates(true);
    }
}

// H√†m kh·ªüi t·∫°o c√°c s·ª± ki·ªán
function initializeEvents() {
    // M·ªü b·∫£ng v·∫Ω
    document.getElementById('openDrawingBoard').addEventListener('click', openDrawingBoard);
    
    // ƒê√≥ng b·∫£ng v·∫Ω
    document.getElementById('closeCanvas').addEventListener('click', closeDrawingBoard);

    // Ch·ªçn m√†u
    document.querySelectorAll('.color-btn').forEach(button => {
        button.addEventListener('click', () => changeColor(button));
    });

    // Ch·∫ø ƒë·ªô x√≥a
    document.getElementById('eraseButton').addEventListener('click', toggleErase);

    // B·∫Øt ƒë·∫ßu v·∫Ω
    const drawingCanvas = document.getElementById('drawingCanvas');
    drawingCanvas.addEventListener('mousedown', startDrawing);
    drawingCanvas.addEventListener('mousemove', draw);
    drawingCanvas.addEventListener('mouseup', stopDrawing);

    drawingCanvas.addEventListener('touchstart', startDrawing);
    drawingCanvas.addEventListener('touchmove', draw);
    drawingCanvas.addEventListener('touchend', stopDrawing);

    // L√†m s·∫°ch b·∫£ng v·∫Ω
    document.getElementById('clearCanvas').addEventListener('click', clearCanvas);

    // L∆∞u b·∫£ng v·∫Ω
    document.getElementById('saveCanvas').addEventListener('click', saveCanvas);
}

// G·ªçi h√†m kh·ªüi t·∫°o khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', initializeEvents);

let mediaRecorder;
let audioChunks = [];
let stream;
let isRecording = false;
const CHANNEL_ID = document.getElementById('channel-id').value;

const recordButton = document.getElementById('recordButton');
recordButton.addEventListener('click', toggleRecording);

function toggleRecording(e) {
    e.preventDefault();

    if (!isRecording) {
        startRecording();
    } else {
        stopRecording();
    }

    isRecording = !isRecording;
}

async function startRecording() {
    try {
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                audioChunks.push(event.data);
            }
        };

        mediaRecorder.onstop = () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            audioChunks = [];
            sendAudio(audioBlob);
            stopStream();
        };

        mediaRecorder.start();
        showNotification('B·∫Øt ƒë·∫ßu ghi √¢m');
        recordButton.classList.add('recording');
    } catch (error) {
        showNotification('Ch·ª©c nƒÉng ghi √¢m ch∆∞a ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');
        console.error(error);
    }
}

function stopRecording() {
    mediaRecorder.stop();
    showNotification('K·∫øt th√∫c ghi √¢m v√† g·ª≠i ghi √¢m');
    recordButton.classList.remove('recording');
    stopStream();
}

function stopStream() {
    if (stream) {
        const tracks = stream.getTracks();
        tracks.forEach(track => track.stop());
    }
}

function sendAudio(audioBlob) {
    const temporaryMsgId = generateTempMsgId();
    const formData = new FormData();
    formData.append("audio", audioBlob, "recording.mp3");
    formData.append("channel_id", currentChannelId());
    formData.append("temporaryMsgId", temporaryMsgId);
    formData.append("_token", csrfToken);

    const sendAudioUrl = document.getElementById('recordButton').dataset.sendAudioUrl;

    const tempAudioMessage = sendTempMessageCard(loadingSVG("28px"), temporaryMsgId);
    messagesContainer.find(".messages").append(tempAudioMessage);
    scrollToBottom(messagesContainer);

    $.ajax({
        url: sendAudioUrl,
        method: "POST",
        data: formData,
        processData: false,
        contentType: false,
        beforeSend: () => {
            console.log("G·ª≠i b·∫£n ghi √¢m");
        },
        success: (data) => {
            handleAudioSuccess(data, temporaryMsgId);
        },
        error: (xhr, status, error) => {
            handleAudioError(error, temporaryMsgId);
        }
    });
}

function handleAudioSuccess(data, temporaryMsgId) {
    if (data.status === '403') {
        Swal.fire({
            icon: "warning",
            title: "Th√¥ng b√°o",
            text: "ƒê√£ b·ªã ch·∫∑n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn!",
        });
    } else if (data.error > 0) {
        errorMessageCard(temporaryMsgId);
        console.error(data.error_msg);
    } else {
        const tempMsgCardElement = messagesContainer.find(`.message-card[data-id="${temporaryMsgId}"]`);
        if (tempMsgCardElement.length) {
            const audioHTML = `
                <audio controls>
                    <source src="${data.audio_url}" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            `;
            tempMsgCardElement.find(".message").html(audioHTML);
        }

        scrollToBottom(messagesContainer);
        updateContactItem(currentChannelId());
        sendContactItemUpdates(true);
    }
}

function handleAudioError(error, temporaryMsgId) {
    errorMessageCard(temporaryMsgId);
    console.error("Failed sending the audio! Error:", error);
}

function generateTempMsgId() {
    temporaryMsgId += 1;
    return `temp_${temporaryMsgId}`;
}



let isVideoRecording = false; // Tr·∫°ng th√°i quay video
let videoMediaRecorder; // MediaRecorder instance
let videoChunks = []; // M·∫£ng l∆∞u tr·ªØ video chunks
let videoStream; // Video stream

const recordVideoButton = document.getElementById('recordVideoButton'); // N√∫t record
const stopRecordingButton = document.getElementById('stopRecordingButton'); // N√∫t stop trong form
const liveVideo = document.getElementById('liveVideo'); // Video element ƒë·ªÉ hi·ªÉn th·ªã stream

recordVideoButton.addEventListener('click', toggleVideoRecording);
stopRecordingButton.addEventListener('click', stopVideoRecording);

// H√†m toggle video recording
function toggleVideoRecording(e) {
    e.preventDefault();
    if (isVideoRecording) {
        return;
    }
    startVideoRecording();
}

// H√†m b·∫Øt ƒë·∫ßu quay video
async function startVideoRecording() {
    isVideoRecording = true;

    try {
        videoStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        liveVideo.srcObject = videoStream;
        liveVideo.style.display = 'block';

        videoMediaRecorder = new MediaRecorder(videoStream);

        videoMediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                videoChunks.push(event.data);
            }
        };

        videoMediaRecorder.onstop = () => {
            const videoBlob = new Blob(videoChunks, { type: 'video/mp4' });
            videoChunks = [];
            sendVideo(videoBlob); // G·ª≠i video l√™n server
            stopVideoStream(); // D·ª´ng stream sau khi quay xong
        };

        videoMediaRecorder.start();
        recordVideoButton.classList.add('recording');
        showNotification("B·∫Øt ƒë·∫ßu ghi h√¨nh");

        // Hi·ªÉn th·ªã modal ho·∫∑c form n·ªïi
        videoModal.style.display = 'block';
    } catch (error) {
        showNotification('Ch·ª©c ghi h√¨nh ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£');
    }
}

// H√†m d·ª´ng quay video
function stopVideoRecording() {
    if (videoMediaRecorder && isVideoRecording) {
        videoMediaRecorder.stop();
        recordVideoButton.classList.remove('recording');
        stopVideoStream();
        videoModal.style.display = 'none';
        showNotification("K·∫øt th√∫c ghi h√¨nh v√† g·ª≠i b·∫£n ghi h√¨nh");
        isVideoRecording = false;
    }
}

// H√†m d·ª´ng video stream
function stopVideoStream() {
    if (videoStream) {
        const tracks = videoStream.getTracks();
        tracks.forEach(track => track.stop());
    }
    liveVideo.style.display = 'none';
}

// H√†m g·ª≠i video l√™n server
function sendVideo(videoBlob) {
    const temporaryMsgId = generateTempMsgId();
    const formData = new FormData();
    formData.append("video", videoBlob, "recording.mp4");
    formData.append("channel_id", currentChannelId());
    formData.append("temporaryMsgId", temporaryMsgId);
    formData.append("_token", csrfToken);

    const tempVideoMessage = sendTempMessageCard(loadingSVG("28px"), temporaryMsgId);
    messagesContainer.find(".messages").append(tempVideoMessage);
    scrollToBottom(messagesContainer);

    const sendVideoUrl = document.getElementById('recordVideoButton').dataset.sendVideoUrl;
    
    $.ajax({
        url: sendVideoUrl,
        method: "POST",
        data: formData,
        processData: false,
        contentType: false,
        beforeSend: () => {
            console.log("G·ª≠i b·∫£n ghi h√¨nh");
        },
        success: (data) => {
            handleVideoSuccess(data, temporaryMsgId);
        },
        error: (xhr, status, error) => {
            handleVideoError(error, temporaryMsgId);
        },
    });
}

// H√†m x·ª≠ l√Ω khi g·ª≠i video th√†nh c√¥ng
function handleVideoSuccess(data, temporaryMsgId) {
    if (data.status === '403') {
        Swal.fire({
            icon: "warning",
            title: "Th√¥ng b√°o",
            text: "ƒê√£ b·ªã ch·∫∑n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn!",
        });
    } else if (data.error > 0) {
        errorMessageCard(temporaryMsgId);
        console.error(data.error_msg);
    } else {
        const tempMsgCardElement = messagesContainer.find(`.message-card[data-id="${temporaryMsgId}"]`);
        if (tempMsgCardElement.length) {
            const videoHTML = `
                <video controls style='max-width: 350px; border-radius: 7px '>
                    <source src="${data.video_url}" type="video/mp4">
                    Your browser does not support the video element.
                </video>
            `;
            tempMsgCardElement.find(".message").html(videoHTML);
        }

        scrollToBottom(messagesContainer);
        updateContactItem(currentChannelId());
        sendContactItemUpdates(true);
    }
}

// H√†m x·ª≠ l√Ω khi g·ª≠i video th·∫•t b·∫°i
function handleVideoError(error, temporaryMsgId) {
    errorMessageCard(temporaryMsgId);
    console.error("Failed sending the video! Error:", error);
}

// H√†m t·∫°o m√£ tin nh·∫Øn t·∫°m th·ªùi
function generateTempMsgId() {
    temporaryMsgId += 1;
    return `temp_${temporaryMsgId}`;
}


// h√†m download t·ªáp tin
function handleDownload(event, url) {
    event.preventDefault(); // Ng·ª´ng h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa li√™n k·∫øt

    const isWebView = /wv/.test(navigator.userAgent) || /Android.*Version\/[\d.]+.*Chrome\/[.0-9]+ Mobile/.test(navigator.userAgent);

    if (isWebView) {
        // N·∫øu ƒëang ·ªü trong WebView, d√πng c√°ch truy·ªÅn th·ªëng ƒë·ªÉ t·∫£i file
        window.location.href = url;  // WebView s·∫Ω t·ª± x·ª≠ l√Ω t·∫£i file
    } else {
        // D√πng fetch + blob cho tr√¨nh duy·ªát
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        Swal.fire({
                            icon: "warning",
                            title: "Th√¥ng b√°o",
                            text: data.error,
                        });
                    });
                }
                return response.blob(); // N·∫øu file t·ªìn t·∫°i, tr·∫£ v·ªÅ blob
            })
            .then(blob => {
                if (blob) {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = ''; // B·∫°n c√≥ th·ªÉ ƒë·∫∑t t√™n file ·ªü ƒë√¢y n·∫øu c·∫ßn
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                }
            })
            .catch(error => {
                console.error('Error downloading file:', error);
            });
    }
}

// update giao di·ªán
function updatePollUIRealtime(messageId, voteCounts, userVotes = null) {
    console.log(`Updating poll UI in real-time for message ${messageId}:`, { 
        voteCounts, 
        userVotes
    });

    const pollContainer = document.querySelector(`#poll-${messageId}`);
    if (!pollContainer) {
        console.error(`Poll container #poll-${messageId} not found`);
        return;
    }

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c l·ª±a ch·ªçn
    document.querySelectorAll(`#poll-${messageId} .poll-options label`).forEach(label => {
        const input = label.querySelector("input[type='checkbox']");
        const option = input.value;
        const badge = label.querySelector(".badge");
        
        // QUAN TR·ªåNG: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng cho t·∫•t c·∫£ c√°c t√πy ch·ªçn, k·ªÉ c·∫£ khi l√† 0
        if (voteCounts) {
            // N·∫øu option t·ªìn t·∫°i trong voteCounts, hi·ªÉn th·ªã gi√° tr·ªã ƒë√≥
            // N·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c l√† undefined, hi·ªÉn th·ªã 0
            badge.textContent = voteCounts[option] !== undefined ? voteCounts[option] : "0";
        }
        
        // Ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ch·ªçn n·∫øu l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë√£ b√¨nh ch·ªçn
        if (userVotes !== null) {
            input.checked = userVotes.includes(option);

            // C·∫≠p nh·∫≠t giao di·ªán d·ª±a tr√™n l·ª±a ch·ªçn
            if (userVotes.includes(option)) {
                label.classList.add("bg-primary", "text-white");
                label.classList.remove("bg-light");
                badge.className = "badge bg-light text-dark";
            } else {
                label.classList.remove("bg-primary", "text-white");
                label.classList.add("bg-light");
                badge.className = "badge bg-secondary";
            }
        }
    });

    // C·∫≠p nh·∫≠t t·ªïng s·ªë ng∆∞·ªùi b√¨nh ch·ªçn
    const totalVoters = calculateTotalVoters(voteCounts);
    const totalVotersElement = pollContainer.querySelector(".total-voters");
    if (totalVotersElement) {
        totalVotersElement.textContent = `${totalVoters} ng∆∞·ªùi ƒë√£ b√¨nh ch·ªçn`;
    }
}

// H√†m t√≠nh t·ªïng s·ªë ng∆∞·ªùi b√¨nh ch·ªçn
function calculateTotalVoters(voteCounts) {
    let total = 0;
    for (const option in voteCounts) {
        total += parseInt(voteCounts[option] || 0);
    }
    return total;
}

// b√¨nh ch·ªçn 1 ho·∫∑c nhi·ªÅu l·ª±a ch·ªçn
function submitPoll(messageId) {
    const selected = document.querySelectorAll(`input[name="poll_${messageId}[]"]:checked`);
    const options = Array.from(selected).map(el => el.value);
        
    const route = window.pollVoteRoute;
    const token = window.csrfToken;

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
    const pollContainer = document.querySelector(`#poll-${messageId}`);
    if (pollContainer) {
        pollContainer.classList.add("poll-processing");
    }

    fetch(route, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-CSRF-TOKEN": token
        },
        body: JSON.stringify({
            message_id: messageId,
            options: options
        })
    })
    .then(res => res.json())
    .then(data => {
        // X√≥a tr·∫°ng th√°i x·ª≠ l√Ω
        if (pollContainer) {
            pollContainer.classList.remove("poll-processing");
        }

        if (data.status === '200') {
            // C·∫≠p nh·∫≠t giao di·ªán cho ng∆∞·ªùi d√πng hi·ªán t·∫°i
            console.log("Poll submitted successfully:", data);
            
            // // Ng∆∞·ªùi d√πng hi·ªán t·∫°i s·∫Ω th·∫•y l·ª±a ch·ªçn c·ªßa h·ªç ƒë∆∞·ª£c c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
            // updatePollUI(messageId, data.vote_counts, data.user_vote || [], data.voters);
        } else {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            showInfoNotification('info' ,data.error || "ƒê√£ x·∫£y ra l·ªói khi b√¨nh ch·ªçn");
        }
    })
    .catch(error => {
        console.error("Error voting on poll:", error);
        // X√≥a tr·∫°ng th√°i x·ª≠ l√Ω
        if (pollContainer) {
            pollContainer.classList.remove("poll-processing");
        }
        showInfoNotification('error' ,"ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi t·ªõi m√°y ch·ªß");
    });
}

function showInfoNotification(type ,message) {
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: type,
            title: 'Th√¥ng b√°o',
            text: message,
        });
    } else {
        alert(message);
    }
}


// modal chuy·ªÉn ti·∫øp
function openModalShareMessage() {
    document.addEventListener('click', function (e) {
        const shareIcon = e.target.closest('.share-btn');
        if (shareIcon) {
            e.preventDefault();
            
            // id c·ªßa tin nh·∫Øn
            const messageId = shareIcon.dataset.toId;
            document.getElementById('shareMessageId').value = messageId;
    
            const modal = new bootstrap.Modal(document.getElementById('shareMessage'));
            modal.show();
        }
    });
}

// t√¨m ki·∫øm user ƒë·ªÉ chuy·ªÉn ti·∫øp
function searchUserDrive(inputId, suggestionsId) {
    const userSearch = document.getElementById(inputId);
    const userSuggestions = document.getElementById(suggestionsId);
    const selectedDisplay = document.getElementById('selectedListDisplay');
    window.selectedList = [];
  
    userSearch.addEventListener('input', function () {
      const query = userSearch.value.trim();
  
      if (query.length >= 1) {
        fetch(`/searchUserDrive?query=${encodeURIComponent(query)}`)
          .then(response => response.json())
          .then(data => {
            userSuggestions.innerHTML = '';
  
            const users = data.users || [];
            const groups = data.groups || [];
  
            if (users.length === 0 && groups.length === 0) {
              userSuggestions.style.display = 'none';
              return;
            }
  
            [...users.map(u => ({...u, type: 'user'})), ...groups.map(g => ({...g, type: 'group'}))].forEach(itemData => {
              const item = document.createElement('a');
              item.classList.add('list-group-item', 'list-group-item-action');
              item.href = '#';
              item.innerText = itemData.type === 'user' ? `${itemData.name} (${itemData.email})` : `${itemData.name} (Nh√≥m)`;
  
              item.addEventListener('click', function () {
                const exists = selectedList.find(i => i.id === itemData.id && i.type === itemData.type);
                if (!exists) {
                  selectedList.push({ id: itemData.id, type: itemData.type, label: item.innerText });
  
                  const li = document.createElement('li');
                  li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
                  li.textContent = item.innerText;
  
                  const removeBtn = document.createElement('button');
                  removeBtn.classList.add('btn', 'btn-sm', 'btn-danger');
                  removeBtn.innerHTML = '&times;';
                  removeBtn.onclick = () => {
                    const index = selectedList.findIndex(i => i.id === itemData.id && i.type === itemData.type);
                    if (index !== -1) {
                      selectedList.splice(index, 1);
                      li.remove();
                      updateHiddenInput(); //c·∫≠p nh·∫≠t l·∫°i input ·∫©n!
                    }
                  };
                  
  
                  li.appendChild(removeBtn);
                  selectedDisplay.appendChild(li);
                }
  
                userSearch.value = '';
                userSuggestions.innerHTML = '';
                updateHiddenInput();
              });
  
              userSuggestions.appendChild(item);
            });
  
            userSuggestions.style.display = 'block';
          });
      } else {
        userSuggestions.style.display = 'none';
      }
    });
  
    function updateHiddenInput() {
      const hiddenInput = document.getElementById('selectedListData');
      hiddenInput.value = JSON.stringify(selectedList);
    }
    
  
    document.addEventListener('click', function (e) {
      if (!userSearch.contains(e.target) && !userSuggestions.contains(e.target)) {
        userSuggestions.style.display = 'none';
      }
    });
}



document.addEventListener('DOMContentLoaded', function() {
    openModalShareMessage();

    searchUserDrive('userSearch', 'userSuggestions');
    shareMessage();
})

// chuy·ªÉn ti·∫øp tin nh·∫Øn
function shareMessage() {
    const shareButton = document.getElementById('shareMessageButton');
    const shareUrl = shareButton?.dataset.shareUrl;

    if (!shareButton || !shareUrl) {
        console.warn('Kh√¥ng t√¨m th·∫•y n√∫t chia s·∫ª ho·∫∑c URL!');
        return;
    }

    shareButton.addEventListener('click', function (e) {
        e.preventDefault();

        const messageId = document.getElementById('shareMessageId').value;
        const selectedList = window.selectedList || [];

        if (selectedList.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Th√¥ng b√°o',
                text: 'B·∫°n ch∆∞a ch·ªçn ng∆∞·ªùi ho·∫∑c nh√≥m chia s·∫ª!',
            });
            return;
        }

        // G√°n d·ªØ li·ªáu v√†o input ·∫©n ƒë·ªÉ form gi·ªØ ƒë·ªìng b·ªô
        document.getElementById('selectedListData').value = JSON.stringify(selectedList);

        const formData = new FormData();
        formData.append("channel_id", currentChannelId());
        formData.append("message_id", messageId);
        formData.append("list_data", JSON.stringify(selectedList));
        formData.append("_token", csrfToken);
        
        shareButton.classList.add('loading');

        $.ajax({
            url: shareUrl,
            method: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.status === '200') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Th√†nh c√¥ng',
                        text: response.message,
                    });
            
                    $('#shareMessage').modal('hide');
            
                    // ‚úÖ C·∫≠p nh·∫≠t l·∫°i ƒë√∫ng channel_id t·ª´ response
                    response.results.forEach(item => {
                        if (item.channel_id) {
                            updateContactItem(item.channel_id);
                        }
                    });
            
                    // G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t UI
                    sendContactItemUpdates(true);
            
                    // X√≥a d·ªØ li·ªáu ƒë√£ ch·ªçn
                    document.getElementById('selectedListDisplay').innerHTML = '';
                    window.selectedList = [];
                    document.getElementById('selectedListData').value = '';
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'L·ªói',
                        text: response.error || 'C√≥ l·ªói x·∫£y ra!',
                    });
                }
            },
            
            error: function (xhr, status, error) {
                console.error("L·ªói khi g·ª≠i y√™u c·∫ßu chia s·∫ª:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'L·ªói',
                    text: 'Kh√¥ng th·ªÉ chia s·∫ª tin nh·∫Øn!',
                });
            },
            complete: function () {
                shareButton.classList.remove('loading');
            }
        });
    });
}

// Tr·∫£ l·ªùi tin nh·∫Øn c·ª• th·ªÉ
function replyToMessage(messageId, messageContent) {
    // Set the reply_message_id hidden input
    document.getElementById('reply_message_id').value = messageId;

    console.log("Setting reply to message ID:", messageId);
    // Create or show reply preview
    let replyPreview = document.getElementById('reply-preview');
    // Create the reply preview content
    let previewContent = messageContent;
    // Trim the content if it's too long
    if (previewContent.length > 50) {
        previewContent = previewContent.substring(0, 50) + '...';
    }

    replyPreview.innerHTML = `
        <div class="reply-content">
            <span class="reply-icon"><i class="fa-solid fa-reply"></i></span>
            <span class="reply-text">${previewContent.replace('>', '')}</span>
        </div>
        <button type="button" class="cancel-reply" onclick="cancelReply()">
            <i class="fa-solid fa-times"></i>
        </button>
    `;

    // Show the reply preview
    replyPreview.style.display = 'flex';

    // Focus on textarea to start typing reply
    document.querySelector('.m-send').focus();

    // Enable the textarea and send button if they're disabled
    document.querySelector('.m-send').removeAttribute('readonly');
    document.querySelector('.send-button').removeAttribute('disabled');
}

// x√≥a tr·∫°ng th√°i tr·∫£ l·ªùi
function cancelReply() {
    // Clear the reply_message_id input
    document.getElementById('reply_message_id').value = '';

    // Hide the reply preview
    const replyPreview = document.getElementById('reply-preview');
    if (replyPreview) {
        replyPreview.style.display = 'none'; // ch·ªâ ·∫©n ch·ª© kh√¥ng x√≥a
        replyPreview.innerHTML = ''; // x√≥a n·ªôi dung n·∫øu c·∫ßn
    }
}

// tr·ªè t·ªõi tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi
function scrollToMessage(messageId) {
    const target = document.getElementById('message-' + messageId);
    if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // Th√™m class highlight border
        target.classList.add('highlight-border');

        // Sau 2s, xo√° class border ƒë·ªÉ tr√°nh gi·ªØ hi·ªáu ·ª©ng qu√° l√¢u
        setTimeout(() => {
            target.classList.remove('highlight-border');
        }, 2000);
    }
}